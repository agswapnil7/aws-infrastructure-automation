Started by user admin
 > git.exe rev-parse --resolve-git-dir C:\Users\swapn\.jenkins\caches\git-77d58f2fcf4a902e1005f2a8f62c5231\.git # timeout=10
Setting origin to https://github.com/agswapnil7/aws-infrastructure-automation.git
 > git.exe config remote.origin.url https://github.com/agswapnil7/aws-infrastructure-automation.git # timeout=10
Fetching origin...
Fetching upstream changes from origin
 > git.exe --version # timeout=10
 > git --version # 'git version 2.44.0.windows.1'
 > git.exe config --get remote.origin.url # timeout=10
using GIT_ASKPASS to set credentials 
 > git.exe fetch --tags --force --progress -- origin +refs/heads/*:refs/remotes/origin/* # timeout=10
Seen branch in repository origin/main
Seen branch in repository origin/s3-deployment
Seen branch in repository origin/vpn-deployment
Seen 3 remote branches
Obtained Jenkinsfile from 36a9037480e4ce06217c3cbc2d0b8d548daba680
[Pipeline] Start of Pipeline
[Pipeline] node
Running on Jenkins in C:\Users\swapn\.jenkins\workspace\aws-infra-auto_vpn-deployment
[Pipeline] {
[Pipeline] stage
[Pipeline] { (Declarative: Checkout SCM)
[Pipeline] checkout
Selected Git installation does not exist. Using Default
The recommended git tool is: NONE
using credential github-creds
 > git.exe rev-parse --resolve-git-dir C:\Users\swapn\.jenkins\workspace\aws-infra-auto_vpn-deployment\.git # timeout=10
Fetching changes from the remote Git repository
 > git.exe config remote.origin.url https://github.com/agswapnil7/aws-infrastructure-automation.git # timeout=10
Fetching without tags
Fetching upstream changes from https://github.com/agswapnil7/aws-infrastructure-automation.git
 > git.exe --version # timeout=10
 > git --version # 'git version 2.44.0.windows.1'
using GIT_ASKPASS to set credentials 
 > git.exe fetch --no-tags --force --progress -- https://github.com/agswapnil7/aws-infrastructure-automation.git +refs/heads/*:refs/remotes/origin/* # timeout=10
Checking out Revision 36a9037480e4ce06217c3cbc2d0b8d548daba680 (vpn-deployment)
 > git.exe config core.sparsecheckout # timeout=10
 > git.exe checkout -f 36a9037480e4ce06217c3cbc2d0b8d548daba680 # timeout=10
Commit message: "update jenkinsfile"
 > git.exe rev-list --no-walk ba1fe51731feeedcec20a5b2ce820c4e7dd3a536 # timeout=10
[Pipeline] }
[Pipeline] // stage
[Pipeline] withEnv
[Pipeline] {
[Pipeline] withEnv
[Pipeline] {
[Pipeline] stage
[Pipeline] { (Checkout)
[Pipeline] checkout
Selected Git installation does not exist. Using Default
The recommended git tool is: NONE
using credential github-creds
 > git.exe rev-parse --resolve-git-dir C:\Users\swapn\.jenkins\workspace\aws-infra-auto_vpn-deployment\.git # timeout=10
Fetching changes from the remote Git repository
 > git.exe config remote.origin.url https://github.com/agswapnil7/aws-infrastructure-automation.git # timeout=10
Fetching without tags
Fetching upstream changes from https://github.com/agswapnil7/aws-infrastructure-automation.git
 > git.exe --version # timeout=10
 > git --version # 'git version 2.44.0.windows.1'
using GIT_ASKPASS to set credentials 
 > git.exe fetch --no-tags --force --progress -- https://github.com/agswapnil7/aws-infrastructure-automation.git +refs/heads/*:refs/remotes/origin/* # timeout=10
Checking out Revision 36a9037480e4ce06217c3cbc2d0b8d548daba680 (vpn-deployment)
 > git.exe config core.sparsecheckout # timeout=10
 > git.exe checkout -f 36a9037480e4ce06217c3cbc2d0b8d548daba680 # timeout=10
Commit message: "update jenkinsfile"
[Pipeline] }
[Pipeline] // stage
[Pipeline] stage
[Pipeline] { (Terraform Init & Validate)
[Pipeline] script
[Pipeline] {
[Pipeline] withCredentials
Masking supported pattern matches of %AWS_ACCESS_KEY_ID% or %AWS_SECRET_ACCESS_KEY%
[Pipeline] {
[Pipeline] sh
+ terraform init

[0m[1mInitializing the backend...[0m

[0m[1mInitializing provider plugins...[0m
- Finding latest version of hashicorp/aws...
- Installing hashicorp/aws v5.100.0...
- Installed hashicorp/aws v5.100.0 (signed by HashiCorp)

Terraform has created a lock file [1m.terraform.lock.hcl[0m to record the provider
selections it made above. Include this file in your version control repository
so that Terraform can guarantee to make the same selections by default when
you run "terraform init" in the future.[0m

[0m[1m[32mTerraform has been successfully initialized![0m[32m[0m
[0m[32m
You may now begin working with Terraform. Try running "terraform plan" to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.[0m
[Pipeline] sh
+ terraform validate
[32m[1mSuccess![0m The configuration is valid.
[0m
[Pipeline] }
[Pipeline] // withCredentials
[Pipeline] }
[Pipeline] // script
[Pipeline] }
[Pipeline] // stage
[Pipeline] stage
[Pipeline] { (Terraform Plan)
[Pipeline] script
[Pipeline] {
[Pipeline] withCredentials
Masking supported pattern matches of %AWS_ACCESS_KEY_ID% or %AWS_SECRET_ACCESS_KEY%
[Pipeline] {
[Pipeline] sh
+ terraform plan -out=tfplan

Terraform used the selected providers to generate the following execution
plan. Resource actions are indicated with the following symbols:
  [32m+[0m create[0m

Terraform will perform the following actions:

[1m  # aws_instance.nat_instances[0][0m will be created
[0m  [32m+[0m[0m resource "aws_instance" "nat_instances" {
      [32m+[0m[0m ami                                  = "ami-00a9d4a05375b2763"
      [32m+[0m[0m arn                                  = (known after apply)
      [32m+[0m[0m associate_public_ip_address          = (known after apply)
      [32m+[0m[0m availability_zone                    = (known after apply)
      [32m+[0m[0m cpu_core_count                       = (known after apply)
      [32m+[0m[0m cpu_threads_per_core                 = (known after apply)
      [32m+[0m[0m disable_api_stop                     = (known after apply)
      [32m+[0m[0m disable_api_termination              = (known after apply)
      [32m+[0m[0m ebs_optimized                        = (known after apply)
      [32m+[0m[0m enable_primary_ipv6                  = (known after apply)
      [32m+[0m[0m get_password_data                    = false
      [32m+[0m[0m host_id                              = (known after apply)
      [32m+[0m[0m host_resource_group_arn              = (known after apply)
      [32m+[0m[0m iam_instance_profile                 = (known after apply)
      [32m+[0m[0m id                                   = (known after apply)
      [32m+[0m[0m instance_initiated_shutdown_behavior = (known after apply)
      [32m+[0m[0m instance_lifecycle                   = (known after apply)
      [32m+[0m[0m instance_state                       = (known after apply)
      [32m+[0m[0m instance_type                        = "t2.micro"
      [32m+[0m[0m ipv6_address_count                   = (known after apply)
      [32m+[0m[0m ipv6_addresses                       = (known after apply)
      [32m+[0m[0m key_name                             = (known after apply)
      [32m+[0m[0m monitoring                           = (known after apply)
      [32m+[0m[0m outpost_arn                          = (known after apply)
      [32m+[0m[0m password_data                        = (known after apply)
      [32m+[0m[0m placement_group                      = (known after apply)
      [32m+[0m[0m placement_partition_number           = (known after apply)
      [32m+[0m[0m primary_network_interface_id         = (known after apply)
      [32m+[0m[0m private_dns                          = (known after apply)
      [32m+[0m[0m private_ip                           = (known after apply)
      [32m+[0m[0m public_dns                           = (known after apply)
      [32m+[0m[0m public_ip                            = (known after apply)
      [32m+[0m[0m secondary_private_ips                = (known after apply)
      [32m+[0m[0m security_groups                      = (known after apply)
      [32m+[0m[0m source_dest_check                    = false
      [32m+[0m[0m spot_instance_request_id             = (known after apply)
      [32m+[0m[0m subnet_id                            = (known after apply)
      [32m+[0m[0m tags                                 = {
          [32m+[0m[0m "Name" = "nat-instance-1"
        }
      [32m+[0m[0m tags_all                             = {
          [32m+[0m[0m "Name" = "nat-instance-1"
        }
      [32m+[0m[0m tenancy                              = (known after apply)
      [32m+[0m[0m user_data                            = (known after apply)
      [32m+[0m[0m user_data_base64                     = (known after apply)
      [32m+[0m[0m user_data_replace_on_change          = false
      [32m+[0m[0m vpc_security_group_ids               = (known after apply)
    }

[1m  # aws_instance.nat_instances[1][0m will be created
[0m  [32m+[0m[0m resource "aws_instance" "nat_instances" {
      [32m+[0m[0m ami                                  = "ami-00a9d4a05375b2763"
      [32m+[0m[0m arn                                  = (known after apply)
      [32m+[0m[0m associate_public_ip_address          = (known after apply)
      [32m+[0m[0m availability_zone                    = (known after apply)
      [32m+[0m[0m cpu_core_count                       = (known after apply)
      [32m+[0m[0m cpu_threads_per_core                 = (known after apply)
      [32m+[0m[0m disable_api_stop                     = (known after apply)
      [32m+[0m[0m disable_api_termination              = (known after apply)
      [32m+[0m[0m ebs_optimized                        = (known after apply)
      [32m+[0m[0m enable_primary_ipv6                  = (known after apply)
      [32m+[0m[0m get_password_data                    = false
      [32m+[0m[0m host_id                              = (known after apply)
      [32m+[0m[0m host_resource_group_arn              = (known after apply)
      [32m+[0m[0m iam_instance_profile                 = (known after apply)
      [32m+[0m[0m id                                   = (known after apply)
      [32m+[0m[0m instance_initiated_shutdown_behavior = (known after apply)
      [32m+[0m[0m instance_lifecycle                   = (known after apply)
      [32m+[0m[0m instance_state                       = (known after apply)
      [32m+[0m[0m instance_type                        = "t2.micro"
      [32m+[0m[0m ipv6_address_count                   = (known after apply)
      [32m+[0m[0m ipv6_addresses                       = (known after apply)
      [32m+[0m[0m key_name                             = (known after apply)
      [32m+[0m[0m monitoring                           = (known after apply)
      [32m+[0m[0m outpost_arn                          = (known after apply)
      [32m+[0m[0m password_data                        = (known after apply)
      [32m+[0m[0m placement_group                      = (known after apply)
      [32m+[0m[0m placement_partition_number           = (known after apply)
      [32m+[0m[0m primary_network_interface_id         = (known after apply)
      [32m+[0m[0m private_dns                          = (known after apply)
      [32m+[0m[0m private_ip                           = (known after apply)
      [32m+[0m[0m public_dns                           = (known after apply)
      [32m+[0m[0m public_ip                            = (known after apply)
      [32m+[0m[0m secondary_private_ips                = (known after apply)
      [32m+[0m[0m security_groups                      = (known after apply)
      [32m+[0m[0m source_dest_check                    = false
      [32m+[0m[0m spot_instance_request_id             = (known after apply)
      [32m+[0m[0m subnet_id                            = (known after apply)
      [32m+[0m[0m tags                                 = {
          [32m+[0m[0m "Name" = "nat-instance-2"
        }
      [32m+[0m[0m tags_all                             = {
          [32m+[0m[0m "Name" = "nat-instance-2"
        }
      [32m+[0m[0m tenancy                              = (known after apply)
      [32m+[0m[0m user_data                            = (known after apply)
      [32m+[0m[0m user_data_base64                     = (known after apply)
      [32m+[0m[0m user_data_replace_on_change          = false
      [32m+[0m[0m vpc_security_group_ids               = (known after apply)
    }

[1m  # aws_instance.nat_instances[2][0m will be created
[0m  [32m+[0m[0m resource "aws_instance" "nat_instances" {
      [32m+[0m[0m ami                                  = "ami-00a9d4a05375b2763"
      [32m+[0m[0m arn                                  = (known after apply)
      [32m+[0m[0m associate_public_ip_address          = (known after apply)
      [32m+[0m[0m availability_zone                    = (known after apply)
      [32m+[0m[0m cpu_core_count                       = (known after apply)
      [32m+[0m[0m cpu_threads_per_core                 = (known after apply)
      [32m+[0m[0m disable_api_stop                     = (known after apply)
      [32m+[0m[0m disable_api_termination              = (known after apply)
      [32m+[0m[0m ebs_optimized                        = (known after apply)
      [32m+[0m[0m enable_primary_ipv6                  = (known after apply)
      [32m+[0m[0m get_password_data                    = false
      [32m+[0m[0m host_id                              = (known after apply)
      [32m+[0m[0m host_resource_group_arn              = (known after apply)
      [32m+[0m[0m iam_instance_profile                 = (known after apply)
      [32m+[0m[0m id                                   = (known after apply)
      [32m+[0m[0m instance_initiated_shutdown_behavior = (known after apply)
      [32m+[0m[0m instance_lifecycle                   = (known after apply)
      [32m+[0m[0m instance_state                       = (known after apply)
      [32m+[0m[0m instance_type                        = "t2.micro"
      [32m+[0m[0m ipv6_address_count                   = (known after apply)
      [32m+[0m[0m ipv6_addresses                       = (known after apply)
      [32m+[0m[0m key_name                             = (known after apply)
      [32m+[0m[0m monitoring                           = (known after apply)
      [32m+[0m[0m outpost_arn                          = (known after apply)
      [32m+[0m[0m password_data                        = (known after apply)
      [32m+[0m[0m placement_group                      = (known after apply)
      [32m+[0m[0m placement_partition_number           = (known after apply)
      [32m+[0m[0m primary_network_interface_id         = (known after apply)
      [32m+[0m[0m private_dns                          = (known after apply)
      [32m+[0m[0m private_ip                           = (known after apply)
      [32m+[0m[0m public_dns                           = (known after apply)
      [32m+[0m[0m public_ip                            = (known after apply)
      [32m+[0m[0m secondary_private_ips                = (known after apply)
      [32m+[0m[0m security_groups                      = (known after apply)
      [32m+[0m[0m source_dest_check                    = false
      [32m+[0m[0m spot_instance_request_id             = (known after apply)
      [32m+[0m[0m subnet_id                            = (known after apply)
      [32m+[0m[0m tags                                 = {
          [32m+[0m[0m "Name" = "nat-instance-3"
        }
      [32m+[0m[0m tags_all                             = {
          [32m+[0m[0m "Name" = "nat-instance-3"
        }
      [32m+[0m[0m tenancy                              = (known after apply)
      [32m+[0m[0m user_data                            = (known after apply)
      [32m+[0m[0m user_data_base64                     = (known after apply)
      [32m+[0m[0m user_data_replace_on_change          = false
      [32m+[0m[0m vpc_security_group_ids               = (known after apply)
    }

[1m  # aws_internet_gateway.vpn_igw[0m will be created
[0m  [32m+[0m[0m resource "aws_internet_gateway" "vpn_igw" {
      [32m+[0m[0m arn      = (known after apply)
      [32m+[0m[0m id       = (known after apply)
      [32m+[0m[0m owner_id = (known after apply)
      [32m+[0m[0m tags     = {
          [32m+[0m[0m "Name" = "vpn-igw"
        }
      [32m+[0m[0m tags_all = {
          [32m+[0m[0m "Name" = "vpn-igw"
        }
      [32m+[0m[0m vpc_id   = (known after apply)
    }

[1m  # aws_route_table.private_rt[0][0m will be created
[0m  [32m+[0m[0m resource "aws_route_table" "private_rt" {
      [32m+[0m[0m arn              = (known after apply)
      [32m+[0m[0m id               = (known after apply)
      [32m+[0m[0m owner_id         = (known after apply)
      [32m+[0m[0m propagating_vgws = (known after apply)
      [32m+[0m[0m route            = [
          [32m+[0m[0m {
              [32m+[0m[0m carrier_gateway_id         = ""
              [32m+[0m[0m cidr_block                 = "0.0.0.0/0"
              [32m+[0m[0m core_network_arn           = ""
              [32m+[0m[0m destination_prefix_list_id = ""
              [32m+[0m[0m egress_only_gateway_id     = ""
              [32m+[0m[0m gateway_id                 = ""
              [32m+[0m[0m ipv6_cidr_block            = ""
              [32m+[0m[0m local_gateway_id           = ""
              [32m+[0m[0m nat_gateway_id             = ""
              [32m+[0m[0m network_interface_id       = (known after apply)
              [32m+[0m[0m transit_gateway_id         = ""
              [32m+[0m[0m vpc_endpoint_id            = ""
              [32m+[0m[0m vpc_peering_connection_id  = ""
            },
        ]
      [32m+[0m[0m tags             = {
          [32m+[0m[0m "Name" = "private-route-table-1"
        }
      [32m+[0m[0m tags_all         = {
          [32m+[0m[0m "Name" = "private-route-table-1"
        }
      [32m+[0m[0m vpc_id           = (known after apply)
    }

[1m  # aws_route_table.private_rt[1][0m will be created
[0m  [32m+[0m[0m resource "aws_route_table" "private_rt" {
      [32m+[0m[0m arn              = (known after apply)
      [32m+[0m[0m id               = (known after apply)
      [32m+[0m[0m owner_id         = (known after apply)
      [32m+[0m[0m propagating_vgws = (known after apply)
      [32m+[0m[0m route            = [
          [32m+[0m[0m {
              [32m+[0m[0m carrier_gateway_id         = ""
              [32m+[0m[0m cidr_block                 = "0.0.0.0/0"
              [32m+[0m[0m core_network_arn           = ""
              [32m+[0m[0m destination_prefix_list_id = ""
              [32m+[0m[0m egress_only_gateway_id     = ""
              [32m+[0m[0m gateway_id                 = ""
              [32m+[0m[0m ipv6_cidr_block            = ""
              [32m+[0m[0m local_gateway_id           = ""
              [32m+[0m[0m nat_gateway_id             = ""
              [32m+[0m[0m network_interface_id       = (known after apply)
              [32m+[0m[0m transit_gateway_id         = ""
              [32m+[0m[0m vpc_endpoint_id            = ""
              [32m+[0m[0m vpc_peering_connection_id  = ""
            },
        ]
      [32m+[0m[0m tags             = {
          [32m+[0m[0m "Name" = "private-route-table-2"
        }
      [32m+[0m[0m tags_all         = {
          [32m+[0m[0m "Name" = "private-route-table-2"
        }
      [32m+[0m[0m vpc_id           = (known after apply)
    }

[1m  # aws_route_table.private_rt[2][0m will be created
[0m  [32m+[0m[0m resource "aws_route_table" "private_rt" {
      [32m+[0m[0m arn              = (known after apply)
      [32m+[0m[0m id               = (known after apply)
      [32m+[0m[0m owner_id         = (known after apply)
      [32m+[0m[0m propagating_vgws = (known after apply)
      [32m+[0m[0m route            = [
          [32m+[0m[0m {
              [32m+[0m[0m carrier_gateway_id         = ""
              [32m+[0m[0m cidr_block                 = "0.0.0.0/0"
              [32m+[0m[0m core_network_arn           = ""
              [32m+[0m[0m destination_prefix_list_id = ""
              [32m+[0m[0m egress_only_gateway_id     = ""
              [32m+[0m[0m gateway_id                 = ""
              [32m+[0m[0m ipv6_cidr_block            = ""
              [32m+[0m[0m local_gateway_id           = ""
              [32m+[0m[0m nat_gateway_id             = ""
              [32m+[0m[0m network_interface_id       = (known after apply)
              [32m+[0m[0m transit_gateway_id         = ""
              [32m+[0m[0m vpc_endpoint_id            = ""
              [32m+[0m[0m vpc_peering_connection_id  = ""
            },
        ]
      [32m+[0m[0m tags             = {
          [32m+[0m[0m "Name" = "private-route-table-3"
        }
      [32m+[0m[0m tags_all         = {
          [32m+[0m[0m "Name" = "private-route-table-3"
        }
      [32m+[0m[0m vpc_id           = (known after apply)
    }

[1m  # aws_route_table.public_rt[0m will be created
[0m  [32m+[0m[0m resource "aws_route_table" "public_rt" {
      [32m+[0m[0m arn              = (known after apply)
      [32m+[0m[0m id               = (known after apply)
      [32m+[0m[0m owner_id         = (known after apply)
      [32m+[0m[0m propagating_vgws = (known after apply)
      [32m+[0m[0m route            = [
          [32m+[0m[0m {
              [32m+[0m[0m carrier_gateway_id         = ""
              [32m+[0m[0m cidr_block                 = "0.0.0.0/0"
              [32m+[0m[0m core_network_arn           = ""
              [32m+[0m[0m destination_prefix_list_id = ""
              [32m+[0m[0m egress_only_gateway_id     = ""
              [32m+[0m[0m gateway_id                 = (known after apply)
              [32m+[0m[0m ipv6_cidr_block            = ""
              [32m+[0m[0m local_gateway_id           = ""
              [32m+[0m[0m nat_gateway_id             = ""
              [32m+[0m[0m network_interface_id       = ""
              [32m+[0m[0m transit_gateway_id         = ""
              [32m+[0m[0m vpc_endpoint_id            = ""
              [32m+[0m[0m vpc_peering_connection_id  = ""
            },
        ]
      [32m+[0m[0m tags             = {
          [32m+[0m[0m "Name" = "public-route-table"
        }
      [32m+[0m[0m tags_all         = {
          [32m+[0m[0m "Name" = "public-route-table"
        }
      [32m+[0m[0m vpc_id           = (known after apply)
    }

[1m  # aws_route_table_association.private_subnet_assoc[0][0m will be created
[0m  [32m+[0m[0m resource "aws_route_table_association" "private_subnet_assoc" {
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m route_table_id = (known after apply)
      [32m+[0m[0m subnet_id      = (known after apply)
    }

[1m  # aws_route_table_association.private_subnet_assoc[1][0m will be created
[0m  [32m+[0m[0m resource "aws_route_table_association" "private_subnet_assoc" {
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m route_table_id = (known after apply)
      [32m+[0m[0m subnet_id      = (known after apply)
    }

[1m  # aws_route_table_association.private_subnet_assoc[2][0m will be created
[0m  [32m+[0m[0m resource "aws_route_table_association" "private_subnet_assoc" {
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m route_table_id = (known after apply)
      [32m+[0m[0m subnet_id      = (known after apply)
    }

[1m  # aws_route_table_association.public_subnet_assoc[0][0m will be created
[0m  [32m+[0m[0m resource "aws_route_table_association" "public_subnet_assoc" {
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m route_table_id = (known after apply)
      [32m+[0m[0m subnet_id      = (known after apply)
    }

[1m  # aws_route_table_association.public_subnet_assoc[1][0m will be created
[0m  [32m+[0m[0m resource "aws_route_table_association" "public_subnet_assoc" {
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m route_table_id = (known after apply)
      [32m+[0m[0m subnet_id      = (known after apply)
    }

[1m  # aws_route_table_association.public_subnet_assoc[2][0m will be created
[0m  [32m+[0m[0m resource "aws_route_table_association" "public_subnet_assoc" {
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m route_table_id = (known after apply)
      [32m+[0m[0m subnet_id      = (known after apply)
    }

[1m  # aws_security_group.nat_sg[0m will be created
[0m  [32m+[0m[0m resource "aws_security_group" "nat_sg" {
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m description            = "Security group for NAT instances"
      [32m+[0m[0m egress                 = [
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = [
                  [32m+[0m[0m "0.0.0.0/0",
                ]
              [32m+[0m[0m description      = ""
              [32m+[0m[0m from_port        = 0
              [32m+[0m[0m ipv6_cidr_blocks = []
              [32m+[0m[0m prefix_list_ids  = []
              [32m+[0m[0m protocol         = "-1"
              [32m+[0m[0m security_groups  = []
              [32m+[0m[0m self             = false
              [32m+[0m[0m to_port          = 0
            },
        ]
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m ingress                = [
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = [
                  [32m+[0m[0m "10.0.0.0/16",
                ]
              [32m+[0m[0m description      = ""
              [32m+[0m[0m from_port        = 443
              [32m+[0m[0m ipv6_cidr_blocks = []
              [32m+[0m[0m prefix_list_ids  = []
              [32m+[0m[0m protocol         = "tcp"
              [32m+[0m[0m security_groups  = []
              [32m+[0m[0m self             = false
              [32m+[0m[0m to_port          = 443
            },
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = [
                  [32m+[0m[0m "10.0.0.0/16",
                ]
              [32m+[0m[0m description      = ""
              [32m+[0m[0m from_port        = 80
              [32m+[0m[0m ipv6_cidr_blocks = []
              [32m+[0m[0m prefix_list_ids  = []
              [32m+[0m[0m protocol         = "tcp"
              [32m+[0m[0m security_groups  = []
              [32m+[0m[0m self             = false
              [32m+[0m[0m to_port          = 80
            },
        ]
      [32m+[0m[0m name                   = "nat-sg"
      [32m+[0m[0m name_prefix            = (known after apply)
      [32m+[0m[0m owner_id               = (known after apply)
      [32m+[0m[0m revoke_rules_on_delete = false
      [32m+[0m[0m tags                   = {
          [32m+[0m[0m "Name" = "nat-security-group"
        }
      [32m+[0m[0m tags_all               = {
          [32m+[0m[0m "Name" = "nat-security-group"
        }
      [32m+[0m[0m vpc_id                 = (known after apply)
    }

[1m  # aws_security_group.vpn_sg[0m will be created
[0m  [32m+[0m[0m resource "aws_security_group" "vpn_sg" {
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m description            = "Security group for VPN endpoint"
      [32m+[0m[0m egress                 = [
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = [
                  [32m+[0m[0m "0.0.0.0/0",
                ]
              [32m+[0m[0m description      = ""
              [32m+[0m[0m from_port        = 0
              [32m+[0m[0m ipv6_cidr_blocks = []
              [32m+[0m[0m prefix_list_ids  = []
              [32m+[0m[0m protocol         = "-1"
              [32m+[0m[0m security_groups  = []
              [32m+[0m[0m self             = false
              [32m+[0m[0m to_port          = 0
            },
        ]
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m ingress                = [
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = [
                  [32m+[0m[0m "0.0.0.0/0",
                ]
              [32m+[0m[0m description      = ""
              [32m+[0m[0m from_port        = 1194
              [32m+[0m[0m ipv6_cidr_blocks = []
              [32m+[0m[0m prefix_list_ids  = []
              [32m+[0m[0m protocol         = "udp"
              [32m+[0m[0m security_groups  = []
              [32m+[0m[0m self             = false
              [32m+[0m[0m to_port          = 1194
            },
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = [
                  [32m+[0m[0m "0.0.0.0/0",
                ]
              [32m+[0m[0m description      = ""
              [32m+[0m[0m from_port        = 443
              [32m+[0m[0m ipv6_cidr_blocks = []
              [32m+[0m[0m prefix_list_ids  = []
              [32m+[0m[0m protocol         = "tcp"
              [32m+[0m[0m security_groups  = []
              [32m+[0m[0m self             = false
              [32m+[0m[0m to_port          = 443
            },
        ]
      [32m+[0m[0m name                   = "vpn-sg"
      [32m+[0m[0m name_prefix            = (known after apply)
      [32m+[0m[0m owner_id               = (known after apply)
      [32m+[0m[0m revoke_rules_on_delete = false
      [32m+[0m[0m tags                   = {
          [32m+[0m[0m "Name" = "vpn-security-group"
        }
      [32m+[0m[0m tags_all               = {
          [32m+[0m[0m "Name" = "vpn-security-group"
        }
      [32m+[0m[0m vpc_id                 = (known after apply)
    }

[1m  # aws_subnet.private_subnets[0][0m will be created
[0m  [32m+[0m[0m resource "aws_subnet" "private_subnets" {
      [32m+[0m[0m arn                                            = (known after apply)
      [32m+[0m[0m assign_ipv6_address_on_creation                = false
      [32m+[0m[0m availability_zone                              = "us-east-1a"
      [32m+[0m[0m availability_zone_id                           = (known after apply)
      [32m+[0m[0m cidr_block                                     = "10.0.101.0/24"
      [32m+[0m[0m enable_dns64                                   = false
      [32m+[0m[0m enable_resource_name_dns_a_record_on_launch    = false
      [32m+[0m[0m enable_resource_name_dns_aaaa_record_on_launch = false
      [32m+[0m[0m id                                             = (known after apply)
      [32m+[0m[0m ipv6_cidr_block_association_id                 = (known after apply)
      [32m+[0m[0m ipv6_native                                    = false
      [32m+[0m[0m map_public_ip_on_launch                        = false
      [32m+[0m[0m owner_id                                       = (known after apply)
      [32m+[0m[0m private_dns_hostname_type_on_launch            = (known after apply)
      [32m+[0m[0m tags                                           = {
          [32m+[0m[0m "Name" = "private-subnet-1"
          [32m+[0m[0m "Type" = "Private"
        }
      [32m+[0m[0m tags_all                                       = {
          [32m+[0m[0m "Name" = "private-subnet-1"
          [32m+[0m[0m "Type" = "Private"
        }
      [32m+[0m[0m vpc_id                                         = (known after apply)
    }

[1m  # aws_subnet.private_subnets[1][0m will be created
[0m  [32m+[0m[0m resource "aws_subnet" "private_subnets" {
      [32m+[0m[0m arn                                            = (known after apply)
      [32m+[0m[0m assign_ipv6_address_on_creation                = false
      [32m+[0m[0m availability_zone                              = "us-east-1b"
      [32m+[0m[0m availability_zone_id                           = (known after apply)
      [32m+[0m[0m cidr_block                                     = "10.0.102.0/24"
      [32m+[0m[0m enable_dns64                                   = false
      [32m+[0m[0m enable_resource_name_dns_a_record_on_launch    = false
      [32m+[0m[0m enable_resource_name_dns_aaaa_record_on_launch = false
      [32m+[0m[0m id                                             = (known after apply)
      [32m+[0m[0m ipv6_cidr_block_association_id                 = (known after apply)
      [32m+[0m[0m ipv6_native                                    = false
      [32m+[0m[0m map_public_ip_on_launch                        = false
      [32m+[0m[0m owner_id                                       = (known after apply)
      [32m+[0m[0m private_dns_hostname_type_on_launch            = (known after apply)
      [32m+[0m[0m tags                                           = {
          [32m+[0m[0m "Name" = "private-subnet-2"
          [32m+[0m[0m "Type" = "Private"
        }
      [32m+[0m[0m tags_all                                       = {
          [32m+[0m[0m "Name" = "private-subnet-2"
          [32m+[0m[0m "Type" = "Private"
        }
      [32m+[0m[0m vpc_id                                         = (known after apply)
    }

[1m  # aws_subnet.private_subnets[2][0m will be created
[0m  [32m+[0m[0m resource "aws_subnet" "private_subnets" {
      [32m+[0m[0m arn                                            = (known after apply)
      [32m+[0m[0m assign_ipv6_address_on_creation                = false
      [32m+[0m[0m availability_zone                              = "us-east-1c"
      [32m+[0m[0m availability_zone_id                           = (known after apply)
      [32m+[0m[0m cidr_block                                     = "10.0.103.0/24"
      [32m+[0m[0m enable_dns64                                   = false
      [32m+[0m[0m enable_resource_name_dns_a_record_on_launch    = false
      [32m+[0m[0m enable_resource_name_dns_aaaa_record_on_launch = false
      [32m+[0m[0m id                                             = (known after apply)
      [32m+[0m[0m ipv6_cidr_block_association_id                 = (known after apply)
      [32m+[0m[0m ipv6_native                                    = false
      [32m+[0m[0m map_public_ip_on_launch                        = false
      [32m+[0m[0m owner_id                                       = (known after apply)
      [32m+[0m[0m private_dns_hostname_type_on_launch            = (known after apply)
      [32m+[0m[0m tags                                           = {
          [32m+[0m[0m "Name" = "private-subnet-3"
          [32m+[0m[0m "Type" = "Private"
        }
      [32m+[0m[0m tags_all                                       = {
          [32m+[0m[0m "Name" = "private-subnet-3"
          [32m+[0m[0m "Type" = "Private"
        }
      [32m+[0m[0m vpc_id                                         = (known after apply)
    }

[1m  # aws_subnet.public_subnets[0][0m will be created
[0m  [32m+[0m[0m resource "aws_subnet" "public_subnets" {
      [32m+[0m[0m arn                                            = (known after apply)
      [32m+[0m[0m assign_ipv6_address_on_creation                = false
      [32m+[0m[0m availability_zone                              = "us-east-1a"
      [32m+[0m[0m availability_zone_id                           = (known after apply)
      [32m+[0m[0m cidr_block                                     = "10.0.1.0/24"
      [32m+[0m[0m enable_dns64                                   = false
      [32m+[0m[0m enable_resource_name_dns_a_record_on_launch    = false
      [32m+[0m[0m enable_resource_name_dns_aaaa_record_on_launch = false
      [32m+[0m[0m id                                             = (known after apply)
      [32m+[0m[0m ipv6_cidr_block_association_id                 = (known after apply)
      [32m+[0m[0m ipv6_native                                    = false
      [32m+[0m[0m map_public_ip_on_launch                        = true
      [32m+[0m[0m owner_id                                       = (known after apply)
      [32m+[0m[0m private_dns_hostname_type_on_launch            = (known after apply)
      [32m+[0m[0m tags                                           = {
          [32m+[0m[0m "Name" = "public-subnet-1"
          [32m+[0m[0m "Type" = "Public"
        }
      [32m+[0m[0m tags_all                                       = {
          [32m+[0m[0m "Name" = "public-subnet-1"
          [32m+[0m[0m "Type" = "Public"
        }
      [32m+[0m[0m vpc_id                                         = (known after apply)
    }

[1m  # aws_subnet.public_subnets[1][0m will be created
[0m  [32m+[0m[0m resource "aws_subnet" "public_subnets" {
      [32m+[0m[0m arn                                            = (known after apply)
      [32m+[0m[0m assign_ipv6_address_on_creation                = false
      [32m+[0m[0m availability_zone                              = "us-east-1b"
      [32m+[0m[0m availability_zone_id                           = (known after apply)
      [32m+[0m[0m cidr_block                                     = "10.0.2.0/24"
      [32m+[0m[0m enable_dns64                                   = false
      [32m+[0m[0m enable_resource_name_dns_a_record_on_launch    = false
      [32m+[0m[0m enable_resource_name_dns_aaaa_record_on_launch = false
      [32m+[0m[0m id                                             = (known after apply)
      [32m+[0m[0m ipv6_cidr_block_association_id                 = (known after apply)
      [32m+[0m[0m ipv6_native                                    = false
      [32m+[0m[0m map_public_ip_on_launch                        = true
      [32m+[0m[0m owner_id                                       = (known after apply)
      [32m+[0m[0m private_dns_hostname_type_on_launch            = (known after apply)
      [32m+[0m[0m tags                                           = {
          [32m+[0m[0m "Name" = "public-subnet-2"
          [32m+[0m[0m "Type" = "Public"
        }
      [32m+[0m[0m tags_all                                       = {
          [32m+[0m[0m "Name" = "public-subnet-2"
          [32m+[0m[0m "Type" = "Public"
        }
      [32m+[0m[0m vpc_id                                         = (known after apply)
    }

[1m  # aws_subnet.public_subnets[2][0m will be created
[0m  [32m+[0m[0m resource "aws_subnet" "public_subnets" {
      [32m+[0m[0m arn                                            = (known after apply)
      [32m+[0m[0m assign_ipv6_address_on_creation                = false
      [32m+[0m[0m availability_zone                              = "us-east-1c"
      [32m+[0m[0m availability_zone_id                           = (known after apply)
      [32m+[0m[0m cidr_block                                     = "10.0.3.0/24"
      [32m+[0m[0m enable_dns64                                   = false
      [32m+[0m[0m enable_resource_name_dns_a_record_on_launch    = false
      [32m+[0m[0m enable_resource_name_dns_aaaa_record_on_launch = false
      [32m+[0m[0m id                                             = (known after apply)
      [32m+[0m[0m ipv6_cidr_block_association_id                 = (known after apply)
      [32m+[0m[0m ipv6_native                                    = false
      [32m+[0m[0m map_public_ip_on_launch                        = true
      [32m+[0m[0m owner_id                                       = (known after apply)
      [32m+[0m[0m private_dns_hostname_type_on_launch            = (known after apply)
      [32m+[0m[0m tags                                           = {
          [32m+[0m[0m "Name" = "public-subnet-3"
          [32m+[0m[0m "Type" = "Public"
        }
      [32m+[0m[0m tags_all                                       = {
          [32m+[0m[0m "Name" = "public-subnet-3"
          [32m+[0m[0m "Type" = "Public"
        }
      [32m+[0m[0m vpc_id                                         = (known after apply)
    }

[1m  # aws_vpc.vpn_vpc[0m will be created
[0m  [32m+[0m[0m resource "aws_vpc" "vpn_vpc" {
      [32m+[0m[0m arn                                  = (known after apply)
      [32m+[0m[0m cidr_block                           = "10.0.0.0/16"
      [32m+[0m[0m default_network_acl_id               = (known after apply)
      [32m+[0m[0m default_route_table_id               = (known after apply)
      [32m+[0m[0m default_security_group_id            = (known after apply)
      [32m+[0m[0m dhcp_options_id                      = (known after apply)
      [32m+[0m[0m enable_dns_hostnames                 = true
      [32m+[0m[0m enable_dns_support                   = true
      [32m+[0m[0m enable_network_address_usage_metrics = (known after apply)
      [32m+[0m[0m id                                   = (known after apply)
      [32m+[0m[0m instance_tenancy                     = "default"
      [32m+[0m[0m ipv6_association_id                  = (known after apply)
      [32m+[0m[0m ipv6_cidr_block                      = (known after apply)
      [32m+[0m[0m ipv6_cidr_block_network_border_group = (known after apply)
      [32m+[0m[0m main_route_table_id                  = (known after apply)
      [32m+[0m[0m owner_id                             = (known after apply)
      [32m+[0m[0m tags                                 = {
          [32m+[0m[0m "Environment" = "terraform-jenkins"
          [32m+[0m[0m "Name"        = "vpn-vpc"
        }
      [32m+[0m[0m tags_all                             = {
          [32m+[0m[0m "Environment" = "terraform-jenkins"
          [32m+[0m[0m "Name"        = "vpn-vpc"
        }
    }

[1mPlan:[0m 23 to add, 0 to change, 0 to destroy.
[0m
Changes to Outputs:
  [32m+[0m[0m nat_instance_ids   = [
      [32m+[0m[0m (known after apply),
      [32m+[0m[0m (known after apply),
      [32m+[0m[0m (known after apply),
    ]
  [32m+[0m[0m private_subnet_ids = [
      [32m+[0m[0m (known after apply),
      [32m+[0m[0m (known after apply),
      [32m+[0m[0m (known after apply),
    ]
  [32m+[0m[0m public_subnet_ids  = [
      [32m+[0m[0m (known after apply),
      [32m+[0m[0m (known after apply),
      [32m+[0m[0m (known after apply),
    ]
  [32m+[0m[0m vpc_id             = (known after apply)
[90m
─────────────────────────────────────────────────────────────────────────────[0m

Saved the plan to: tfplan

To perform exactly these actions, run the following command to apply:
    terraform apply "tfplan"
[Pipeline] }
[Pipeline] // withCredentials
[Pipeline] }
[Pipeline] // script
[Pipeline] }
[Pipeline] // stage
[Pipeline] stage
[Pipeline] { (Deploy VPN Infrastructure)
[Pipeline] script
[Pipeline] {
[Pipeline] withCredentials
Masking supported pattern matches of %AWS_ACCESS_KEY_ID% or %AWS_SECRET_ACCESS_KEY%
[Pipeline] {
[Pipeline] sh
+ terraform apply -auto-approve tfplan
[0m[1maws_vpc.vpn_vpc: Creating...[0m[0m
[0m[1maws_vpc.vpn_vpc: Still creating... [10s elapsed][0m[0m
[0m[1maws_vpc.vpn_vpc: Creation complete after 17s [id=vpc-0a4e618c56fcf4ec2][0m
[0m[1maws_internet_gateway.vpn_igw: Creating...[0m[0m
[0m[1maws_subnet.private_subnets[0]: Creating...[0m[0m
[0m[1maws_subnet.public_subnets[1]: Creating...[0m[0m
[0m[1maws_subnet.public_subnets[0]: Creating...[0m[0m
[0m[1maws_subnet.public_subnets[2]: Creating...[0m[0m
[0m[1maws_subnet.private_subnets[2]: Creating...[0m[0m
[0m[1maws_subnet.private_subnets[1]: Creating...[0m[0m
[0m[1maws_security_group.vpn_sg: Creating...[0m[0m
[0m[1maws_security_group.nat_sg: Creating...[0m[0m
[0m[1maws_internet_gateway.vpn_igw: Creation complete after 2s [id=igw-04c4c5e8d2aaa7b94][0m
[0m[1maws_route_table.public_rt: Creating...[0m[0m
[0m[1maws_subnet.private_subnets[1]: Creation complete after 3s [id=subnet-0a1c71552ab8ef664][0m
[0m[1maws_subnet.private_subnets[2]: Creation complete after 3s [id=subnet-05de7041779d2ed9d][0m
[0m[1maws_subnet.private_subnets[0]: Creation complete after 5s [id=subnet-0fb1a8e8e78c4f7ef][0m
[0m[1maws_route_table.public_rt: Creation complete after 3s [id=rtb-0a5487188bfb72f8a][0m
[0m[1maws_security_group.vpn_sg: Creation complete after 7s [id=sg-0997277352dab942f][0m
[0m[1maws_security_group.nat_sg: Creation complete after 7s [id=sg-0bd4963b9a06e4e35][0m
[0m[1maws_subnet.public_subnets[0]: Still creating... [10s elapsed][0m[0m
[0m[1maws_subnet.public_subnets[1]: Still creating... [10s elapsed][0m[0m
[0m[1maws_subnet.public_subnets[2]: Still creating... [10s elapsed][0m[0m
[0m[1maws_subnet.public_subnets[0]: Creation complete after 13s [id=subnet-04a4bbd1253fd4994][0m
[0m[1maws_subnet.public_subnets[1]: Creation complete after 13s [id=subnet-0ee19a1a8a73a5ea3][0m
[0m[1maws_subnet.public_subnets[2]: Creation complete after 13s [id=subnet-083634c2ad2221008][0m
[0m[1maws_route_table_association.public_subnet_assoc[1]: Creating...[0m[0m
[0m[1maws_route_table_association.public_subnet_assoc[2]: Creating...[0m[0m
[0m[1maws_route_table_association.public_subnet_assoc[0]: Creating...[0m[0m
[0m[1maws_instance.nat_instances[0]: Creating...[0m[0m
[0m[1maws_instance.nat_instances[2]: Creating...[0m[0m
[0m[1maws_instance.nat_instances[1]: Creating...[0m[0m
[0m[1maws_route_table_association.public_subnet_assoc[2]: Creation complete after 2s [id=rtbassoc-0eee78762edc7863e][0m
[0m[1maws_route_table_association.public_subnet_assoc[0]: Creation complete after 2s [id=rtbassoc-0cfcc1a320fb09de7][0m
[0m[1maws_route_table_association.public_subnet_assoc[1]: Creation complete after 2s [id=rtbassoc-09331aff0f9dcde7f][0m
[0m[1maws_instance.nat_instances[0]: Still creating... [10s elapsed][0m[0m
[0m[1maws_instance.nat_instances[2]: Still creating... [10s elapsed][0m[0m
[0m[1maws_instance.nat_instances[1]: Still creating... [10s elapsed][0m[0m
[0m[1maws_instance.nat_instances[0]: Still creating... [21s elapsed][0m[0m
[0m[1maws_instance.nat_instances[1]: Still creating... [21s elapsed][0m[0m
[0m[1maws_instance.nat_instances[2]: Still creating... [21s elapsed][0m[0m
[0m[1maws_instance.nat_instances[2]: Creation complete after 28s [id=i-0e3dae16e8433e0ee][0m
[0m[1maws_instance.nat_instances[0]: Still creating... [31s elapsed][0m[0m
[0m[1maws_instance.nat_instances[1]: Still creating... [31s elapsed][0m[0m
[0m[1maws_instance.nat_instances[1]: Still creating... [41s elapsed][0m[0m
[0m[1maws_instance.nat_instances[0]: Still creating... [41s elapsed][0m[0m
[0m[1maws_instance.nat_instances[0]: Creation complete after 48s [id=i-0d9525ffa3c6301f1][0m
[0m[1maws_instance.nat_instances[1]: Creation complete after 48s [id=i-07e33019c94fb29b6][0m
[0m[1maws_route_table.private_rt[2]: Creating...[0m[0m
[0m[1maws_route_table.private_rt[0]: Creating...[0m[0m
[0m[1maws_route_table.private_rt[1]: Creating...[0m[0m
[0m[1maws_route_table.private_rt[0]: Creation complete after 4s [id=rtb-0309d82546a0d0d40][0m
[0m[1maws_route_table.private_rt[2]: Creation complete after 4s [id=rtb-0eb758ede7d9f0769][0m
[0m[1maws_route_table.private_rt[1]: Creation complete after 4s [id=rtb-0eb07be15db62256d][0m
[0m[1maws_route_table_association.private_subnet_assoc[0]: Creating...[0m[0m
[0m[1maws_route_table_association.private_subnet_assoc[1]: Creating...[0m[0m
[0m[1maws_route_table_association.private_subnet_assoc[2]: Creating...[0m[0m
[0m[1maws_route_table_association.private_subnet_assoc[0]: Creation complete after 2s [id=rtbassoc-0c2bbe7df87e9f037][0m
[0m[1maws_route_table_association.private_subnet_assoc[1]: Creation complete after 2s [id=rtbassoc-007f0ae4d111dd331][0m
[0m[1maws_route_table_association.private_subnet_assoc[2]: Creation complete after 2s [id=rtbassoc-034ab203de73b4a49][0m
[0m[1m[32m
Apply complete! Resources: 23 added, 0 changed, 0 destroyed.
[0m[0m[1m[32m
Outputs:

[0mnat_instance_ids = [
  "i-0d9525ffa3c6301f1",
  "i-07e33019c94fb29b6",
  "i-0e3dae16e8433e0ee",
]
private_subnet_ids = [
  "subnet-0fb1a8e8e78c4f7ef",
  "subnet-0a1c71552ab8ef664",
  "subnet-05de7041779d2ed9d",
]
public_subnet_ids = [
  "subnet-04a4bbd1253fd4994",
  "subnet-0ee19a1a8a73a5ea3",
  "subnet-083634c2ad2221008",
]
vpc_id = "vpc-0a4e618c56fcf4ec2"
[Pipeline] sh
+ terraform output
nat_instance_ids = [
  "i-0d9525ffa3c6301f1",
  "i-07e33019c94fb29b6",
  "i-0e3dae16e8433e0ee",
]
private_subnet_ids = [
  "subnet-0fb1a8e8e78c4f7ef",
  "subnet-0a1c71552ab8ef664",
  "subnet-05de7041779d2ed9d",
]
public_subnet_ids = [
  "subnet-04a4bbd1253fd4994",
  "subnet-0ee19a1a8a73a5ea3",
  "subnet-083634c2ad2221008",
]
vpc_id = "vpc-0a4e618c56fcf4ec2"
[Pipeline] }
[Pipeline] // withCredentials
[Pipeline] }
[Pipeline] // script
[Pipeline] }
[Pipeline] // stage
[Pipeline] stage
[Pipeline] { (Declarative: Post Actions)
[Pipeline] script
[Pipeline] {
[Pipeline] echo
Cleaning up workspace...
[Pipeline] deleteDir
[Pipeline] }
[Pipeline] // script
[Pipeline] echo
VPN infrastructure pipeline completed successfully!
[Pipeline] script
[Pipeline] {
[Pipeline] sh
+ rm -f tfplan terraform.tfstate.backup
[Pipeline] }
[Pipeline] // script
[Pipeline] }
[Pipeline] // stage
[Pipeline] }
[Pipeline] // withEnv
[Pipeline] }
[Pipeline] // withEnv
[Pipeline] }
[Pipeline] // node
[Pipeline] End of Pipeline
Finished: SUCCESS