Started by user admin
 > git.exe rev-parse --resolve-git-dir C:\Users\swapn\.jenkins\caches\git-77d58f2fcf4a902e1005f2a8f62c5231\.git # timeout=10
Setting origin to https://github.com/agswapnil7/aws-infrastructure-automation.git
 > git.exe config remote.origin.url https://github.com/agswapnil7/aws-infrastructure-automation.git # timeout=10
Fetching origin...
Fetching upstream changes from origin
 > git.exe --version # timeout=10
 > git --version # 'git version 2.44.0.windows.1'
 > git.exe config --get remote.origin.url # timeout=10
using GIT_ASKPASS to set credentials 
 > git.exe fetch --tags --force --progress -- origin +refs/heads/*:refs/remotes/origin/* # timeout=10
Seen branch in repository origin/main
Seen branch in repository origin/s3-deployment
Seen branch in repository origin/vpn-deployment
Seen 3 remote branches
Obtained Jenkinsfile from dc1e9cfd52a55206644e2c0c92f575b613ed67d9
[Pipeline] Start of Pipeline
[Pipeline] node
Running on Jenkins in C:\Users\swapn\.jenkins\workspace\aws-infra-auto_s3-deployment
[Pipeline] {
[Pipeline] stage
[Pipeline] { (Declarative: Checkout SCM)
[Pipeline] checkout
Selected Git installation does not exist. Using Default
The recommended git tool is: NONE
using credential github-creds
 > git.exe rev-parse --resolve-git-dir C:\Users\swapn\.jenkins\workspace\aws-infra-auto_s3-deployment\.git # timeout=10
Fetching changes from the remote Git repository
 > git.exe config remote.origin.url https://github.com/agswapnil7/aws-infrastructure-automation.git # timeout=10
Fetching without tags
Fetching upstream changes from https://github.com/agswapnil7/aws-infrastructure-automation.git
 > git.exe --version # timeout=10
 > git --version # 'git version 2.44.0.windows.1'
using GIT_ASKPASS to set credentials 
 > git.exe fetch --no-tags --force --progress -- https://github.com/agswapnil7/aws-infrastructure-automation.git +refs/heads/*:refs/remotes/origin/* # timeout=10
Checking out Revision dc1e9cfd52a55206644e2c0c92f575b613ed67d9 (s3-deployment)
 > git.exe config core.sparsecheckout # timeout=10
 > git.exe checkout -f dc1e9cfd52a55206644e2c0c92f575b613ed67d9 # timeout=10
Commit message: "update jenkinsfile"
 > git.exe rev-list --no-walk d2bd4f55884a72bda941a71262af06d6a07ff2aa # timeout=10
[Pipeline] }
[Pipeline] // stage
[Pipeline] withEnv
[Pipeline] {
[Pipeline] withEnv
[Pipeline] {
[Pipeline] stage
[Pipeline] { (Checkout)
[Pipeline] checkout
Selected Git installation does not exist. Using Default
The recommended git tool is: NONE
using credential github-creds
 > git.exe rev-parse --resolve-git-dir C:\Users\swapn\.jenkins\workspace\aws-infra-auto_s3-deployment\.git # timeout=10
Fetching changes from the remote Git repository
 > git.exe config remote.origin.url https://github.com/agswapnil7/aws-infrastructure-automation.git # timeout=10
Fetching without tags
Fetching upstream changes from https://github.com/agswapnil7/aws-infrastructure-automation.git
 > git.exe --version # timeout=10
 > git --version # 'git version 2.44.0.windows.1'
using GIT_ASKPASS to set credentials 
 > git.exe fetch --no-tags --force --progress -- https://github.com/agswapnil7/aws-infrastructure-automation.git +refs/heads/*:refs/remotes/origin/* # timeout=10
Checking out Revision dc1e9cfd52a55206644e2c0c92f575b613ed67d9 (s3-deployment)
 > git.exe config core.sparsecheckout # timeout=10
 > git.exe checkout -f dc1e9cfd52a55206644e2c0c92f575b613ed67d9 # timeout=10
Commit message: "update jenkinsfile"
[Pipeline] }
[Pipeline] // stage
[Pipeline] stage
[Pipeline] { (Terraform Init & Validate)
[Pipeline] script
[Pipeline] {
[Pipeline] withCredentials
Masking supported pattern matches of %AWS_ACCESS_KEY_ID% or %AWS_SECRET_ACCESS_KEY%
[Pipeline] {
[Pipeline] sh
+ terraform init

[0m[1mInitializing the backend...[0m

[0m[1mInitializing provider plugins...[0m
- Finding latest version of hashicorp/aws...
- Finding latest version of hashicorp/random...
- Installing hashicorp/aws v5.100.0...
- Installed hashicorp/aws v5.100.0 (signed by HashiCorp)
- Installing hashicorp/random v3.7.2...
- Installed hashicorp/random v3.7.2 (signed by HashiCorp)

Terraform has created a lock file [1m.terraform.lock.hcl[0m to record the provider
selections it made above. Include this file in your version control repository
so that Terraform can guarantee to make the same selections by default when
you run "terraform init" in the future.[0m

[0m[1m[32mTerraform has been successfully initialized![0m[32m[0m
[0m[32m
You may now begin working with Terraform. Try running "terraform plan" to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.[0m
[Pipeline] sh
+ terraform validate
[32m[1mSuccess![0m The configuration is valid.
[0m
[Pipeline] }
[Pipeline] // withCredentials
[Pipeline] }
[Pipeline] // script
[Pipeline] }
[Pipeline] // stage
[Pipeline] stage
[Pipeline] { (Terraform Plan)
[Pipeline] script
[Pipeline] {
[Pipeline] withCredentials
Masking supported pattern matches of %AWS_ACCESS_KEY_ID% or %AWS_SECRET_ACCESS_KEY%
[Pipeline] {
[Pipeline] sh
+ terraform plan -out=tfplan

Terraform used the selected providers to generate the following execution
plan. Resource actions are indicated with the following symbols:
  [32m+[0m create[0m

Terraform will perform the following actions:

[1m  # aws_s3_bucket.terraform_jenkins_bucket[0m will be created
[0m  [32m+[0m[0m resource "aws_s3_bucket" "terraform_jenkins_bucket" {
      [32m+[0m[0m acceleration_status         = (known after apply)
      [32m+[0m[0m acl                         = (known after apply)
      [32m+[0m[0m arn                         = (known after apply)
      [32m+[0m[0m bucket                      = (known after apply)
      [32m+[0m[0m bucket_domain_name          = (known after apply)
      [32m+[0m[0m bucket_prefix               = (known after apply)
      [32m+[0m[0m bucket_regional_domain_name = (known after apply)
      [32m+[0m[0m force_destroy               = false
      [32m+[0m[0m hosted_zone_id              = (known after apply)
      [32m+[0m[0m id                          = (known after apply)
      [32m+[0m[0m object_lock_enabled         = (known after apply)
      [32m+[0m[0m policy                      = (known after apply)
      [32m+[0m[0m region                      = (known after apply)
      [32m+[0m[0m request_payer               = (known after apply)
      [32m+[0m[0m tags                        = {
          [32m+[0m[0m "CreatedBy"   = "Jenkins-Pipeline"
          [32m+[0m[0m "Environment" = "Development"
          [32m+[0m[0m "Name"        = "Terraform-Jenkins-S3-Bucket"
        }
      [32m+[0m[0m tags_all                    = {
          [32m+[0m[0m "CreatedBy"   = "Jenkins-Pipeline"
          [32m+[0m[0m "Environment" = "Development"
          [32m+[0m[0m "Name"        = "Terraform-Jenkins-S3-Bucket"
        }
      [32m+[0m[0m website_domain              = (known after apply)
      [32m+[0m[0m website_endpoint            = (known after apply)
    }

[1m  # aws_s3_bucket_public_access_block.bucket_pab[0m will be created
[0m  [32m+[0m[0m resource "aws_s3_bucket_public_access_block" "bucket_pab" {
      [32m+[0m[0m block_public_acls       = true
      [32m+[0m[0m block_public_policy     = true
      [32m+[0m[0m bucket                  = (known after apply)
      [32m+[0m[0m id                      = (known after apply)
      [32m+[0m[0m ignore_public_acls      = true
      [32m+[0m[0m restrict_public_buckets = true
    }

[1m  # aws_s3_bucket_server_side_encryption_configuration.bucket_encryption[0m will be created
[0m  [32m+[0m[0m resource "aws_s3_bucket_server_side_encryption_configuration" "bucket_encryption" {
      [32m+[0m[0m bucket = (known after apply)
      [32m+[0m[0m id     = (known after apply)

      [32m+[0m[0m rule {
          [32m+[0m[0m apply_server_side_encryption_by_default {
              [32m+[0m[0m sse_algorithm = "AES256"
            }
        }
    }

[1m  # aws_s3_bucket_versioning.bucket_versioning[0m will be created
[0m  [32m+[0m[0m resource "aws_s3_bucket_versioning" "bucket_versioning" {
      [32m+[0m[0m bucket = (known after apply)
      [32m+[0m[0m id     = (known after apply)

      [32m+[0m[0m versioning_configuration {
          [32m+[0m[0m mfa_delete = (known after apply)
          [32m+[0m[0m status     = "Enabled"
        }
    }

[1m  # aws_s3_object.sample_file[0m will be created
[0m  [32m+[0m[0m resource "aws_s3_object" "sample_file" {
      [32m+[0m[0m acl                    = (known after apply)
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m bucket                 = (known after apply)
      [32m+[0m[0m bucket_key_enabled     = (known after apply)
      [32m+[0m[0m checksum_crc32         = (known after apply)
      [32m+[0m[0m checksum_crc32c        = (known after apply)
      [32m+[0m[0m checksum_crc64nvme     = (known after apply)
      [32m+[0m[0m checksum_sha1          = (known after apply)
      [32m+[0m[0m checksum_sha256        = (known after apply)
      [32m+[0m[0m content                = (known after apply)
      [32m+[0m[0m content_type           = (known after apply)
      [32m+[0m[0m etag                   = (known after apply)
      [32m+[0m[0m force_destroy          = false
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m key                    = "sample/jenkins-terraform-test.txt"
      [32m+[0m[0m kms_key_id             = (known after apply)
      [32m+[0m[0m server_side_encryption = (known after apply)
      [32m+[0m[0m storage_class          = (known after apply)
      [32m+[0m[0m tags                   = {
          [32m+[0m[0m "CreatedBy" = "Jenkins-Terraform-Pipeline"
        }
      [32m+[0m[0m tags_all               = {
          [32m+[0m[0m "CreatedBy" = "Jenkins-Terraform-Pipeline"
        }
      [32m+[0m[0m version_id             = (known after apply)
    }

[1m  # random_id.bucket_suffix[0m will be created
[0m  [32m+[0m[0m resource "random_id" "bucket_suffix" {
      [32m+[0m[0m b64_std     = (known after apply)
      [32m+[0m[0m b64_url     = (known after apply)
      [32m+[0m[0m byte_length = 4
      [32m+[0m[0m dec         = (known after apply)
      [32m+[0m[0m hex         = (known after apply)
      [32m+[0m[0m id          = (known after apply)
    }

[1mPlan:[0m 6 to add, 0 to change, 0 to destroy.
[0m
Changes to Outputs:
  [32m+[0m[0m bucket_arn    = (known after apply)
  [32m+[0m[0m bucket_name   = (known after apply)
  [32m+[0m[0m bucket_region = (known after apply)
[90m
─────────────────────────────────────────────────────────────────────────────[0m

Saved the plan to: tfplan

To perform exactly these actions, run the following command to apply:
    terraform apply "tfplan"
[Pipeline] }
[Pipeline] // withCredentials
[Pipeline] }
[Pipeline] // script
[Pipeline] }
[Pipeline] // stage
[Pipeline] stage
[Pipeline] { (Deploy S3 Infrastructure)
[Pipeline] script
[Pipeline] {
[Pipeline] withCredentials
Masking supported pattern matches of %AWS_ACCESS_KEY_ID% or %AWS_SECRET_ACCESS_KEY%
[Pipeline] {
[Pipeline] sh
+ terraform apply -auto-approve tfplan
[0m[1mrandom_id.bucket_suffix: Creating...[0m[0m
[0m[1mrandom_id.bucket_suffix: Creation complete after 0s [id=2p_1XQ][0m
[0m[1maws_s3_bucket.terraform_jenkins_bucket: Creating...[0m[0m
[0m[1maws_s3_bucket.terraform_jenkins_bucket: Creation complete after 8s [id=terraform-jenkins-s3-da9ff55d][0m
[0m[1maws_s3_bucket_public_access_block.bucket_pab: Creating...[0m[0m
[0m[1maws_s3_bucket_versioning.bucket_versioning: Creating...[0m[0m
[0m[1maws_s3_bucket_server_side_encryption_configuration.bucket_encryption: Creating...[0m[0m
[0m[1maws_s3_object.sample_file: Creating...[0m[0m
[0m[1maws_s3_bucket_public_access_block.bucket_pab: Creation complete after 2s [id=terraform-jenkins-s3-da9ff55d][0m
[0m[1maws_s3_object.sample_file: Creation complete after 2s [id=sample/jenkins-terraform-test.txt][0m
[0m[1maws_s3_bucket_server_side_encryption_configuration.bucket_encryption: Creation complete after 2s [id=terraform-jenkins-s3-da9ff55d][0m
[0m[1maws_s3_bucket_versioning.bucket_versioning: Creation complete after 3s [id=terraform-jenkins-s3-da9ff55d][0m
[0m[1m[32m
Apply complete! Resources: 6 added, 0 changed, 0 destroyed.
[0m[0m[1m[32m
Outputs:

[0mbucket_arn = "arn:aws:s3:::terraform-jenkins-s3-da9ff55d"
bucket_name = "terraform-jenkins-s3-da9ff55d"
bucket_region = "us-east-1"
[Pipeline] sh
+ terraform output
bucket_arn = "arn:aws:s3:::terraform-jenkins-s3-da9ff55d"
bucket_name = "terraform-jenkins-s3-da9ff55d"
bucket_region = "us-east-1"
[Pipeline] }
[Pipeline] // withCredentials
[Pipeline] }
[Pipeline] // script
[Pipeline] }
[Pipeline] // stage
[Pipeline] stage
[Pipeline] { (Declarative: Post Actions)
[Pipeline] script
[Pipeline] {
[Pipeline] echo
Cleaning up workspace...
[Pipeline] deleteDir
[Pipeline] }
[Pipeline] // script
[Pipeline] echo
S3 infrastructure pipeline completed successfully!
[Pipeline] script
[Pipeline] {
[Pipeline] sh
+ rm -f tfplan terraform.tfstate.backup
[Pipeline] }
[Pipeline] // script
[Pipeline] }
[Pipeline] // stage
[Pipeline] }
[Pipeline] // withEnv
[Pipeline] }
[Pipeline] // withEnv
[Pipeline] }
[Pipeline] // node
[Pipeline] End of Pipeline
Finished: SUCCESS